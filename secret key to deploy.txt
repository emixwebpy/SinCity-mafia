set FLASK_SECRET_KEY=your-very-strong-random-key

python -m smtpd -c DebuggingServer -n localhost:1025


@app.cli.command('create-admin')
def create_admin():
    user = User.query.filter_by(username='admin_master').first()
    if not user:
        user = User(
            username='admin_master',
            email='eeee@ddd.com'
        )
        user.set_password('S3cureAdm1nP@ssw0rd!')
        user.is_admin = True
        user.email_verified = True  # <-- Admin email is always verified
        db.session.add(user)
        db.session.commit()
        print("Admin user created.")
    else:
        user.is_admin = True
        user.email_verified = True  # <-- Ensure admin stays verified
        db.session.commit()
        print("Admin user updated.")

---list of security failures---
1.
2.
3.
4. 


5.

6. 

7. 

8. **SQL Injection
You use SQLAlchemy ORM, which is safe from SQL injection as long as you donâ€™t use raw SQL with user input.

9. Mass Assignment
In admin edit routes, you set model fields directly from request.form without validation.
Risk: Attackers could submit extra fields and overwrite unintended data.
Mitigation: Only assign fields you explicitly allow.

10. Race Conditions
Some logic (e.g., buying/selling drugs, shop purchases) could be vulnerable to race conditions if two requests are made at once.
Mitigation: Use database transactions or locks if this is a concern.

11. 

12. 

13.

14. Unrestricted Admin Actions
Admins can edit/delete users, forums, etc. Ensure only trusted users have admin rights.

15. No CAPTCHA
No CAPTCHA on registration or password reset, which could allow bots to abuse these endpoints.

16. No Account Lockout
No lockout after repeated failed login attempts.

17. No HTTPS Enforcement
Ensure your production deployment uses HTTPS and sets SESSION_COOKIE_SECURE = True.

18. No Email Change Verification
If users can change their email, verify the new email before updating.